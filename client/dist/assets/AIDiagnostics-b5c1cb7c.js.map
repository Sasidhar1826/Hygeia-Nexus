{"version":3,"file":"AIDiagnostics-b5c1cb7c.js","sources":["../../src/pages/AIDiagnostics.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\nimport {\n  FaBrain,\n  FaSpinner,\n  FaCheckCircle,\n  FaExclamationTriangle,\n  FaListAlt,\n  FaRobot,\n  FaPaperPlane,\n  FaInfoCircle,\n} from \"react-icons/fa\";\nimport Card from \"../components/ui/Card\";\nimport Button from \"../components/ui/Button\";\nimport Input from \"../components/ui/Input\";\nimport api from \"../services/apiService\";\n\nconst PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${(props) => props.theme.spacing(3)};\n`;\n\nconst MainCardContainer = styled(Card)`\n  position: relative;\n  padding: ${(props) => props.theme.spacing(3)};\n`;\n\nconst CardHeader = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${(props) => props.theme.spacing(2)};\n\n  svg {\n    font-size: 24px;\n    color: ${(props) => props.theme.colors.primary.main};\n    margin-right: ${(props) => props.theme.spacing(1)};\n  }\n\n  h3 {\n    font-size: 18px;\n    font-weight: 600;\n    margin: 0;\n  }\n`;\n\nconst ResultCard = styled(Card)`\n  margin-top: ${(props) => props.theme.spacing(3)};\n  border-left: 4px solid\n    ${(props) =>\n      props.status === \"success\"\n        ? props.theme.colors.status.success\n        : props.status === \"warning\"\n        ? props.theme.colors.status.warning\n        : props.theme.colors.status.info};\n`;\n\nconst SymptomsList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: ${(props) => props.theme.spacing(1)};\n  margin-bottom: ${(props) => props.theme.spacing(3)};\n`;\n\nconst SymptomItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${(props) => props.theme.spacing(1)};\n\n  input {\n    accent-color: ${(props) => props.theme.colors.primary.main};\n  }\n`;\n\nconst SymptomButton = styled(Button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: ${(props) => props.theme.spacing(1)};\n  position: absolute;\n  top: ${(props) => props.theme.spacing(1)};\n  right: ${(props) => props.theme.spacing(1)};\n  padding: ${(props) =>\n    `${props.theme.spacing(0.75)} ${props.theme.spacing(1.5)}`};\n  font-size: 0.85rem;\n`;\n\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${(props) => props.theme.spacing(2)};\n  margin-bottom: ${(props) => props.theme.spacing(2)};\n  max-height: 400px;\n  overflow-y: auto;\n  padding: ${(props) => props.theme.spacing(1)};\n`;\n\nconst MessageBubble = styled.div`\n  padding: ${(props) => props.theme.spacing(1.5)};\n  border-radius: ${(props) => props.theme.borderRadius.medium};\n  max-width: 80%;\n  word-break: break-word;\n  white-space: pre-line;\n\n  ${(props) =>\n    props.isUser\n      ? `\n    align-self: flex-end;\n    background-color: ${props.theme.colors.primary.main};\n    color: white;\n  `\n      : `\n    align-self: flex-start;\n    background-color: ${props.theme.colors.background.card};\n    border-left: 3px solid ${props.theme.colors.primary.main};\n  `}\n\n  p {\n    margin: ${(props) => props.theme.spacing(0.5)} 0;\n  }\n\n  ul,\n  ol {\n    margin: ${(props) => props.theme.spacing(0.5)} 0;\n    padding-left: ${(props) => props.theme.spacing(2)};\n  }\n\n  strong,\n  b {\n    font-weight: 600;\n  }\n`;\n\nconst ChatInputContainer = styled.div`\n  display: flex;\n  margin-top: auto;\n  gap: ${(props) => props.theme.spacing(1)};\n`;\n\nconst ChatInput = styled(Input)`\n  flex: 1;\n`;\n\nconst SendButton = styled(Button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  padding: 0;\n  border-radius: 50%;\n`;\n\nconst MessageSource = styled.div`\n  font-size: 12px;\n  margin-top: ${(props) => props.theme.spacing(0.5)};\n  color: ${(props) => props.theme.colors.text.secondary};\n`;\n\nconst ApiAlert = styled.div`\n  background-color: ${(props) =>\n    props.success\n      ? props.theme.colors.status.success + \"20\"\n      : props.theme.colors.status.warning + \"20\"};\n  border-left: 3px solid\n    ${(props) =>\n      props.success\n        ? props.theme.colors.status.success\n        : props.theme.colors.status.warning};\n  padding: ${(props) => props.theme.spacing(2)};\n  margin-bottom: ${(props) => props.theme.spacing(2)};\n  border-radius: ${(props) => props.theme.borderRadius.medium};\n  display: ${(props) => (props.visible ? \"flex\" : \"none\")};\n  align-items: center;\n  gap: ${(props) => props.theme.spacing(1)};\n\n  svg {\n    color: ${(props) =>\n      props.success\n        ? props.theme.colors.status.success\n        : props.theme.colors.status.warning};\n    font-size: 18px;\n  }\n`;\n\n// Add a spinning animation\nconst SpinningIcon = styled(FaSpinner)`\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst AIDiagnostics = () => {\n  const [selectedSymptoms, setSelectedSymptoms] = useState([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [results, setResults] = useState(null);\n  const [showSymptomSelector, setShowSymptomSelector] = useState(false);\n  const [chatHistory, setChatHistory] = useState([\n    {\n      isUser: false,\n      text: \"Hello! I'm your medical assistant. How can I help you today? You can ask me about symptoms, general health questions, or medical information. You can also click the symptom selector button to analyze specific symptoms.\",\n      source: \"AI Medical Assistant\",\n    },\n  ]);\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [apiStatus, setApiStatus] = useState({\n    checked: false,\n    working: false,\n    message: \"\",\n  });\n  const messagesEndRef = useRef(null);\n\n  const symptoms = [\n    \"Fever\",\n    \"Cough\",\n    \"Headache\",\n    \"Fatigue\",\n    \"Nausea\",\n    \"Dizziness\",\n    \"Shortness of breath\",\n    \"Chest pain\",\n    \"Abdominal pain\",\n    \"Joint pain\",\n    \"Rash\",\n    \"Sore throat\",\n  ];\n\n  // API check on component mount\n  useEffect(() => {\n    const checkApiKey = async () => {\n      try {\n        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n\n        console.log(\n          \"Environment API key check:\",\n          apiKey ? \"Found key\" : \"No key found\"\n        );\n\n        if (!apiKey) {\n          setApiStatus({\n            checked: true,\n            working: false,\n            message: \"No Gemini API key found in environment variables\",\n          });\n          return;\n        }\n\n        // Simple validation - make sure it has the correct format\n        if (!apiKey.startsWith(\"AIza\")) {\n          setApiStatus({\n            checked: true,\n            working: false,\n            message:\n              \"Invalid Gemini API key format. Keys should start with 'AIza'\",\n          });\n          return;\n        }\n\n        console.log(\n          \"Testing Gemini API connection with key:\",\n          apiKey.substring(0, 5) + \"...\" + apiKey.substring(apiKey.length - 5)\n        );\n\n        // Send a simple test message to the Gemini API\n        const testResult = await api.getMedicalChatResponse(\n          \"Hello, this is a test message to verify the API connection is working correctly.\",\n          []\n        );\n\n        if (testResult && !testResult.error) {\n          console.log(\"API test successful\");\n          setApiStatus({\n            checked: true,\n            working: true,\n            message: \"Gemini API connection successful\",\n          });\n        } else {\n          console.log(\"API test failed with error\");\n          setApiStatus({\n            checked: true,\n            working: false,\n            message: \"Gemini API returned an error. Check console for details\",\n          });\n        }\n      } catch (error) {\n        console.error(\"API key validation error:\", error);\n        setApiStatus({\n          checked: true,\n          working: false,\n          message: `Gemini API key issue: ${error.message}`,\n        });\n      }\n    };\n\n    checkApiKey();\n  }, []);\n\n  // Auto-scroll to bottom when chat updates\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [chatHistory]);\n\n  const handleSymptomChange = (symptom) => {\n    if (selectedSymptoms.includes(symptom)) {\n      setSelectedSymptoms(selectedSymptoms.filter((s) => s !== symptom));\n    } else {\n      setSelectedSymptoms([...selectedSymptoms, symptom]);\n    }\n  };\n\n  const handleAnalyze = async () => {\n    if (selectedSymptoms.length === 0) return;\n\n    setIsAnalyzing(true);\n\n    try {\n      // Add the symptom list to chat as user message\n      const symptomsText = selectedSymptoms.join(\", \");\n      const userMessage = {\n        isUser: true,\n        text: `I'm experiencing these symptoms: ${symptomsText}`,\n      };\n\n      setChatHistory((prev) => [...prev, userMessage]);\n\n      // Get analysis from API\n      const analysisResults = await api.analyzeSymptomsAI(selectedSymptoms);\n\n      // Save the results\n      setResults(analysisResults);\n\n      // Format analysis as assistant response\n      const formattedDetails = analysisResults.details.join(\"\\n• \");\n      const formattedRecommendations =\n        analysisResults.recommendations.join(\"\\n• \");\n\n      const analysisResponse = {\n        isUser: false,\n        text: `Based on the symptoms you reported (${symptomsText}), here's my analysis:\\n\\n**${analysisResults.title}** (confidence: ${analysisResults.confidence}%)\\n\\n**Analysis:**\\n• ${formattedDetails}\\n\\n**Recommendations:**\\n• ${formattedRecommendations}\\n\\nThis is an automated analysis and not a medical diagnosis. Please consult a healthcare professional for proper evaluation.`,\n        source: \"AI Medical Assistant\",\n      };\n\n      setChatHistory((prev) => [...prev, analysisResponse]);\n\n      // Reset symptom selector\n      setShowSymptomSelector(false);\n\n      // Clear selected symptoms after analysis\n      setSelectedSymptoms([]);\n    } catch (error) {\n      console.error(\"Error analyzing symptoms:\", error);\n\n      // Add error message to chat\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          isUser: false,\n          text: \"I'm sorry, I encountered an error analyzing your symptoms. Please try again later.\",\n          source: \"AI Medical Assistant\",\n          error: true,\n        },\n      ]);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const toggleSymptomSelector = () => {\n    setShowSymptomSelector(!showSymptomSelector);\n  };\n\n  // Process text to handle markdown-like formatting\n  const formatMessageText = (text) => {\n    // Replace ** with <strong> tags for bold text\n    let formattedText = text\n      .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\n      // Replace bullet points\n      .replace(/^•\\s(.+)$/gm, \"<li>$1</li>\")\n      // Replace numbered lists\n      .replace(/^\\d+\\.\\s(.+)$/gm, \"<li>$1</li>\");\n\n    // Wrap lists in <ul> tags when there are list items\n    if (formattedText.includes(\"<li>\")) {\n      formattedText = formattedText.replace(\n        /(<li>.*?<\\/li>)\\s*(<li>.*?<\\/li>)/gs,\n        \"<ul>$1$2</ul>\"\n      );\n    }\n\n    // Replace newlines with <br>\n    formattedText = formattedText\n      .replace(/\\n\\n/g, \"<br><br>\")\n      .replace(/\\n/g, \"<br>\");\n\n    return formattedText;\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!chatMessage.trim()) return;\n\n    // Add user message to chat\n    const userMessage = { isUser: true, text: chatMessage };\n    setChatHistory((prev) => [...prev, userMessage]);\n    setChatMessage(\"\");\n    setIsLoading(true);\n\n    try {\n      // Get response from API - this will use Gemini API if available\n      const response = await api.getMedicalChatResponse(\n        chatMessage,\n        chatHistory\n      );\n\n      // Add AI response to chat\n      setChatHistory((prev) => [...prev, response]);\n    } catch (error) {\n      console.error(\"Chat error:\", error);\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          isUser: false,\n          text: \"I'm sorry, I encountered an error processing your request. Please try again later.\",\n          source: \"AI Medical Assistant\",\n          error: true,\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <PageContainer>\n      <h2>AI Medical Assistant</h2>\n      <p>\n        Chat with our AI assistant about health concerns and receive\n        personalized insights.\n      </p>\n\n      {apiStatus.checked && (\n        <ApiAlert visible success={apiStatus.working}>\n          {apiStatus.working ? (\n            <>\n              <FaCheckCircle /> {apiStatus.message}\n            </>\n          ) : (\n            <>\n              <FaInfoCircle /> {apiStatus.message} Falling back to mock\n              responses.\n            </>\n          )}\n        </ApiAlert>\n      )}\n\n      <MainCardContainer>\n        <SymptomButton variant=\"outlined\" onClick={toggleSymptomSelector}>\n          <FaListAlt />{\" \"}\n          {showSymptomSelector\n            ? \"Hide Symptom Selector\"\n            : \"Show Symptom Selector\"}\n        </SymptomButton>\n\n        <CardHeader>\n          <FaRobot />\n          <h3>Medical Chat Assistant</h3>\n        </CardHeader>\n\n        {showSymptomSelector && (\n          <div>\n            <p>Select symptoms for analysis:</p>\n\n            <SymptomsList>\n              {symptoms.map((symptom) => (\n                <SymptomItem key={symptom}>\n                  <input\n                    type=\"checkbox\"\n                    id={symptom}\n                    checked={selectedSymptoms.includes(symptom)}\n                    onChange={() => handleSymptomChange(symptom)}\n                  />\n                  <label htmlFor={symptom}>{symptom}</label>\n                </SymptomItem>\n              ))}\n            </SymptomsList>\n\n            <Button\n              variant=\"primary\"\n              onClick={handleAnalyze}\n              disabled={selectedSymptoms.length === 0 || isAnalyzing}\n            >\n              {isAnalyzing ? (\n                <>\n                  <SpinningIcon /> Analyzing...\n                </>\n              ) : (\n                \"Analyze Symptoms\"\n              )}\n            </Button>\n          </div>\n        )}\n\n        <ChatContainer>\n          <MessagesContainer>\n            {chatHistory.map((message, index) => (\n              <MessageBubble key={index} isUser={message.isUser}>\n                {message.isUser ? (\n                  message.text\n                ) : (\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: formatMessageText(message.text),\n                    }}\n                  />\n                )}\n                {!message.isUser && message.source && (\n                  <MessageSource>{message.source}</MessageSource>\n                )}\n              </MessageBubble>\n            ))}\n            <div ref={messagesEndRef} />\n          </MessagesContainer>\n\n          <ChatInputContainer>\n            <ChatInput\n              type=\"text\"\n              value={chatMessage}\n              onChange={(e) => setChatMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your health question...\"\n              disabled={isLoading}\n            />\n            <SendButton\n              variant=\"primary\"\n              onClick={handleSendMessage}\n              disabled={isLoading || !chatMessage.trim()}\n            >\n              {isLoading ? <SpinningIcon /> : <FaPaperPlane />}\n            </SendButton>\n          </ChatInputContainer>\n\n          <p\n            style={{\n              fontStyle: \"italic\",\n              fontSize: \"12px\",\n              marginTop: \"16px\",\n            }}\n          >\n            Note: This AI assistant provides general information only and is not\n            a substitute for professional medical advice, diagnosis, or\n            treatment.\n          </p>\n        </ChatContainer>\n      </MainCardContainer>\n    </PageContainer>\n  );\n};\n\nexport default AIDiagnostics;\n"],"names":["PageContainer","styled","props","MainCardContainer","Card","CardHeader","SymptomsList","SymptomItem","SymptomButton","Button","ChatContainer","MessagesContainer","MessageBubble","ChatInputContainer","ChatInput","Input","SendButton","MessageSource","ApiAlert","SpinningIcon","FaSpinner","AIDiagnostics","selectedSymptoms","setSelectedSymptoms","useState","isAnalyzing","setIsAnalyzing","results","setResults","showSymptomSelector","setShowSymptomSelector","chatHistory","setChatHistory","chatMessage","setChatMessage","isLoading","setIsLoading","apiStatus","setApiStatus","messagesEndRef","useRef","symptoms","useEffect","apiKey","testResult","api","error","handleSymptomChange","symptom","handleAnalyze","symptomsText","userMessage","prev","analysisResults","formattedDetails","formattedRecommendations","analysisResponse","toggleSymptomSelector","formatMessageText","text","formattedText","handleKeyPress","e","handleSendMessage","response","jsx","jsxs","Fragment","FaCheckCircle","FaInfoCircle","FaListAlt","FaRobot","message","index","FaPaperPlane"],"mappings":"yUAkBA,MAAMA,EAAgBC,EAAO;AAAA;AAAA;AAAA,SAGnBC,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,EAGpCC,EAAoBF,EAAOG,CAAI;AAAA;AAAA,aAEvBF,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,EAGxCG,EAAaJ,EAAO;AAAA;AAAA;AAAA,mBAGNC,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,aAItCA,GAAUA,EAAM,MAAM,OAAO,QAAQ,IAAI;AAAA,oBAClCA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUlCD,EAAOG,CAAI;AAAA,gBACbF,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA;AAAA,MAE1CA,GACDA,EAAM,SAAW,UACbA,EAAM,MAAM,OAAO,OAAO,QAC1BA,EAAM,SAAW,UACjBA,EAAM,MAAM,OAAO,OAAO,QAC1BA,EAAM,MAAM,OAAO,OAAO,IAAI;AAAA,EAGxC,MAAMI,EAAeL,EAAO;AAAA;AAAA;AAAA,SAGlBC,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,mBACtBA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,EAG9CK,EAAcN,EAAO;AAAA;AAAA;AAAA,SAGjBC,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA,oBAGrBA,GAAUA,EAAM,MAAM,OAAO,QAAQ,IAAI;AAAA;AAAA,EAIxDM,EAAgBP,EAAOQ,CAAM;AAAA;AAAA;AAAA;AAAA,SAIzBP,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA;AAAA,SAEhCA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,WAC9BA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,aAC9BA,GACV,GAAGA,EAAM,MAAM,QAAQ,GAAI,CAAC,IAAIA,EAAM,MAAM,QAAQ,GAAG,CAAC,EAAE;AAAA;AAAA,EAIxDQ,EAAgBT,EAAO;AAAA;AAAA;AAAA;AAAA,EAMvBU,EAAoBV,EAAO;AAAA;AAAA;AAAA,SAGvBC,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,mBACtBA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA,aAGtCA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,EAGxCU,GAAgBX,EAAO;AAAA,aACfC,GAAUA,EAAM,MAAM,QAAQ,GAAG,CAAC;AAAA,mBAC5BA,GAAUA,EAAM,MAAM,aAAa,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,IAKxDA,GACDA,EAAM,OACF;AAAA;AAAA,wBAEgBA,EAAM,MAAM,OAAO,QAAQ,IAAI;AAAA;AAAA,IAG/C;AAAA;AAAA,wBAEgBA,EAAM,MAAM,OAAO,WAAW,IAAI;AAAA,6BAC7BA,EAAM,MAAM,OAAO,QAAQ,IAAI;AAAA,GACzD;AAAA;AAAA;AAAA,cAGYA,GAAUA,EAAM,MAAM,QAAQ,EAAG,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,cAKlCA,GAAUA,EAAM,MAAM,QAAQ,EAAG,CAAC;AAAA,oBAC5BA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS/CW,GAAqBZ,EAAO;AAAA;AAAA;AAAA,SAGxBC,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,EAGpCY,GAAYb,EAAOc,CAAK;AAAA;AAAA,EAIxBC,GAAaf,EAAOQ,CAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAU1BQ,GAAgBhB,EAAO;AAAA;AAAA,gBAEZC,GAAUA,EAAM,MAAM,QAAQ,EAAG,CAAC;AAAA,WACvCA,GAAUA,EAAM,MAAM,OAAO,KAAK,SAAS;AAAA,EAGjDgB,GAAWjB,EAAO;AAAA,sBACDC,GACnBA,EAAM,QACFA,EAAM,MAAM,OAAO,OAAO,QAAU,KACpCA,EAAM,MAAM,OAAO,OAAO,QAAU,IAAI;AAAA;AAAA,MAEzCA,GACDA,EAAM,QACFA,EAAM,MAAM,OAAO,OAAO,QAC1BA,EAAM,MAAM,OAAO,OAAO,OAAO;AAAA,aAC7BA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,mBAC1BA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,mBAChCA,GAAUA,EAAM,MAAM,aAAa,MAAM;AAAA,aAC/CA,GAAWA,EAAM,QAAU,OAAS,MAAO;AAAA;AAAA,SAE/CA,GAAUA,EAAM,MAAM,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA,aAG5BA,GACRA,EAAM,QACFA,EAAM,MAAM,OAAO,OAAO,QAC1BA,EAAM,MAAM,OAAO,OAAO,OAAO;AAAA;AAAA;AAAA,EAMrCiB,EAAelB,EAAOmB,CAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAa/BC,GAAgB,IAAM,CAC1B,KAAM,CAACC,EAAkBC,CAAmB,EAAIC,EAAA,SAAS,CAAE,CAAA,EACrD,CAACC,EAAaC,CAAc,EAAIF,WAAS,EAAK,EAC9C,CAACG,GAASC,CAAU,EAAIJ,WAAS,IAAI,EACrC,CAACK,EAAqBC,CAAsB,EAAIN,WAAS,EAAK,EAC9D,CAACO,EAAaC,CAAc,EAAIR,WAAS,CAC7C,CACE,OAAQ,GACR,KAAM,6NACN,OAAQ,sBACV,CAAA,CACD,EACK,CAACS,EAAaC,CAAc,EAAIV,WAAS,EAAE,EAC3C,CAACW,EAAWC,CAAY,EAAIZ,WAAS,EAAK,EAC1C,CAACa,EAAWC,CAAY,EAAId,WAAS,CACzC,QAAS,GACT,QAAS,GACT,QAAS,EAAA,CACV,EACKe,EAAiBC,SAAO,IAAI,EAE5BC,EAAW,CACf,QACA,QACA,WACA,UACA,SACA,YACA,sBACA,aACA,iBACA,aACA,OACA,aAAA,EAIFC,EAAAA,UAAU,IAAM,EACM,SAAY,CAC1B,GAAA,CACI,MAAAC,EAAS,0CAiBf,GAfQ,QAAA,IACN,6BACAA,EAAS,YAAc,cAAA,EAarB,CAACA,EAAO,WAAW,MAAM,EAAG,CACjBL,EAAA,CACX,QAAS,GACT,QAAS,GACT,QACE,8DAAA,CACH,EACD,MACF,CAEQ,QAAA,IACN,0CACAK,EAAO,UAAU,EAAG,CAAC,EAAI,MAAQA,EAAO,UAAUA,EAAO,OAAS,CAAC,CAAA,EAI/D,MAAAC,EAAa,MAAMC,EAAI,uBAC3B,mFACA,CAAC,CAAA,EAGCD,GAAc,CAACA,EAAW,OAC5B,QAAQ,IAAI,qBAAqB,EACpBN,EAAA,CACX,QAAS,GACT,QAAS,GACT,QAAS,kCAAA,CACV,IAED,QAAQ,IAAI,4BAA4B,EAC3BA,EAAA,CACX,QAAS,GACT,QAAS,GACT,QAAS,yDAAA,CACV,SAEIQ,EAAO,CACN,QAAA,MAAM,4BAA6BA,CAAK,EACnCR,EAAA,CACX,QAAS,GACT,QAAS,GACT,QAAS,yBAAyBQ,EAAM,OAAO,EAAA,CAChD,CACH,CAAA,IAIJ,EAAG,CAAE,CAAA,EAGLJ,EAAAA,UAAU,IAAM,CACVH,EAAe,SACjBA,EAAe,QAAQ,eAAe,CAAE,SAAU,QAAU,CAAA,CAC9D,EACC,CAACR,CAAW,CAAC,EAEV,MAAAgB,EAAuBC,GAAY,CACnC1B,EAAiB,SAAS0B,CAAO,EACnCzB,EAAoBD,EAAiB,OAAQ,GAAM,IAAM0B,CAAO,CAAC,EAEjEzB,EAAoB,CAAC,GAAGD,EAAkB0B,CAAO,CAAC,CACpD,EAGIC,EAAgB,SAAY,CAChC,GAAI3B,EAAiB,SAAW,EAEhC,CAAAI,EAAe,EAAI,EAEf,GAAA,CAEI,MAAAwB,EAAe5B,EAAiB,KAAK,IAAI,EACzC6B,EAAc,CAClB,OAAQ,GACR,KAAM,oCAAoCD,CAAY,EAAA,EAGxDlB,EAAgBoB,GAAS,CAAC,GAAGA,EAAMD,CAAW,CAAC,EAG/C,MAAME,EAAkB,MAAMR,EAAI,kBAAkBvB,CAAgB,EAGpEM,EAAWyB,CAAe,EAG1B,MAAMC,EAAmBD,EAAgB,QAAQ,KAAK;AAAA,GAAM,EACtDE,EACJF,EAAgB,gBAAgB,KAAK;AAAA,GAAM,EAEvCG,EAAmB,CACvB,OAAQ,GACR,KAAM,uCAAuCN,CAAY;AAAA;AAAA,IAA+BG,EAAgB,KAAK,mBAAmBA,EAAgB,UAAU;AAAA;AAAA;AAAA,IAA0BC,CAAgB;AAAA;AAAA;AAAA,IAA+BC,CAAwB;AAAA;AAAA,4HAC3P,OAAQ,sBAAA,EAGVvB,EAAgBoB,GAAS,CAAC,GAAGA,EAAMI,CAAgB,CAAC,EAGpD1B,EAAuB,EAAK,EAG5BP,EAAoB,CAAE,CAAA,QACfuB,EAAO,CACN,QAAA,MAAM,4BAA6BA,CAAK,EAGhDd,EAAgBoB,GAAS,CACvB,GAAGA,EACH,CACE,OAAQ,GACR,KAAM,qFACN,OAAQ,uBACR,MAAO,EACT,CAAA,CACD,CAAA,QACD,CACA1B,EAAe,EAAK,CACtB,EAAA,EAGI+B,EAAwB,IAAM,CAClC3B,EAAuB,CAACD,CAAmB,CAAA,EAIvC6B,EAAqBC,GAAS,CAElC,IAAIC,EAAgBD,EACjB,QAAQ,iBAAkB,qBAAqB,EAE/C,QAAQ,cAAe,aAAa,EAEpC,QAAQ,kBAAmB,aAAa,EAGvC,OAAAC,EAAc,SAAS,MAAM,IAC/BA,EAAgBA,EAAc,QAC5B,sCACA,eAAA,GAKJA,EAAgBA,EACb,QAAQ,QAAS,UAAU,EAC3B,QAAQ,MAAO,MAAM,EAEjBA,CAAA,EAGHC,EAAkBC,GAAM,CACxBA,EAAE,MAAQ,SAAW,CAACA,EAAE,WAC1BA,EAAE,eAAe,EACCC,IACpB,EAGIA,EAAoB,SAAY,CAChC,GAAA,CAAC9B,EAAY,KAAK,EAAG,OAGzB,MAAMkB,EAAc,CAAE,OAAQ,GAAM,KAAMlB,CAAY,EACtDD,EAAgBoB,GAAS,CAAC,GAAGA,EAAMD,CAAW,CAAC,EAC/CjB,EAAe,EAAE,EACjBE,EAAa,EAAI,EAEb,GAAA,CAEI,MAAA4B,EAAW,MAAMnB,EAAI,uBACzBZ,EACAF,CAAA,EAIFC,EAAgBoB,GAAS,CAAC,GAAGA,EAAMY,CAAQ,CAAC,QACrClB,EAAO,CACN,QAAA,MAAM,cAAeA,CAAK,EAClCd,EAAgBoB,GAAS,CACvB,GAAGA,EACH,CACE,OAAQ,GACR,KAAM,qFACN,OAAQ,uBACR,MAAO,EACT,CAAA,CACD,CAAA,QACD,CACAhB,EAAa,EAAK,CACpB,CAAA,EAGF,SACGpC,EACC,CAAA,SAAA,CAAAiE,EAAC,MAAG,SAAoB,sBAAA,CAAA,EACxBA,EAAC,KAAE,SAGH,qFAAA,CAAA,EAEC5B,EAAU,SACT4B,EAAC/C,GAAS,CAAA,QAAO,GAAC,QAASmB,EAAU,QAClC,SAAUA,EAAA,QAEP6B,EAAAC,EAAA,CAAA,SAAA,CAAAF,EAACG,EAAc,EAAA,EAAE,IAAE/B,EAAU,OAAA,CAAA,CAC/B,EAGE6B,EAAAC,EAAA,CAAA,SAAA,CAAAF,EAACI,EAAa,EAAA,EAAE,IAAEhC,EAAU,QAAQ,kCAAA,CAAA,CAEtC,CAEJ,CAAA,IAGDlC,EACC,CAAA,SAAA,CAAA+D,EAAC1D,EAAc,CAAA,QAAQ,WAAW,QAASiD,EACzC,SAAA,CAAAQ,EAACK,EAAU,EAAA,EAAG,IACbzC,EACG,wBACA,uBAAA,EACN,IAECxB,EACC,CAAA,SAAA,CAAA4D,EAACM,EAAQ,EAAA,EACTN,EAAC,MAAG,SAAsB,wBAAA,CAAA,CAAA,EAC5B,EAECpC,KACE,MACC,CAAA,SAAA,CAAAoC,EAAC,KAAE,SAA6B,+BAAA,CAAA,IAE/B3D,EACE,CAAA,SAAAmC,EAAS,IAAKO,KACZzC,EACC,CAAA,SAAA,CAAA0D,EAAC,QAAA,CACC,KAAK,WACL,GAAIjB,EACJ,QAAS1B,EAAiB,SAAS0B,CAAO,EAC1C,SAAU,IAAMD,EAAoBC,CAAO,CAAA,CAC7C,EACCiB,EAAA,QAAA,CAAM,QAASjB,EAAU,SAAQA,EAAA,CAAA,GAPlBA,CAQlB,CACD,EACH,EAEAiB,EAACxD,EAAA,CACC,QAAQ,UACR,QAASwC,EACT,SAAU3B,EAAiB,SAAW,GAAKG,EAE1C,WAEGyC,EAAAC,EAAA,CAAA,SAAA,CAAAF,EAAC9C,EAAa,EAAA,EAAE,eAAA,CAAA,CAClB,EAEA,kBAAA,CAEJ,CAAA,EACF,IAGDT,EACC,CAAA,SAAA,CAAAwD,EAACvD,EACE,CAAA,SAAA,CAAYoB,EAAA,IAAI,CAACyC,EAASC,MACxB7D,GAA0B,CAAA,OAAQ4D,EAAQ,OACxC,SAAA,CAAQA,EAAA,OACPA,EAAQ,KAERP,EAAC,MAAA,CACC,wBAAyB,CACvB,OAAQP,EAAkBc,EAAQ,IAAI,CACxC,CAAA,CACF,EAED,CAACA,EAAQ,QAAUA,EAAQ,QACzBP,EAAAhD,GAAA,CAAe,WAAQ,OAAO,CAAA,CAAA,EAXfwD,CAapB,CACD,EACDR,EAAC,MAAI,CAAA,IAAK1B,CAAgB,CAAA,CAAA,EAC5B,IAEC1B,GACC,CAAA,SAAA,CAAAoD,EAACnD,GAAA,CACC,KAAK,OACL,MAAOmB,EACP,SAAW6B,GAAM5B,EAAe4B,EAAE,OAAO,KAAK,EAC9C,WAAYD,EACZ,YAAY,+BACZ,SAAU1B,CAAA,CACZ,EACA8B,EAACjD,GAAA,CACC,QAAQ,UACR,QAAS+C,EACT,SAAU5B,GAAa,CAACF,EAAY,KAAK,EAExC,SAAYE,EAAA8B,EAAC9C,EAAa,CAAA,CAAA,IAAMuD,EAAa,EAAA,CAAA,CAChD,CAAA,EACF,EAEAT,EAAC,IAAA,CACC,MAAO,CACL,UAAW,SACX,SAAU,OACV,UAAW,MACb,EACD,SAAA,6IAAA,CAID,CAAA,EACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ"}