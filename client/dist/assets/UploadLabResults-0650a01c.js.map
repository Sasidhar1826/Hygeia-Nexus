{"version":3,"file":"UploadLabResults-0650a01c.js","sources":["../../src/pages/lab/UploadLabResults.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\nimport {\n  FaUpload,\n  FaUser,\n  FaFileMedical,\n  FaVial,\n  FaCheck,\n  FaPlus,\n  FaTimes,\n} from \"react-icons/fa\";\nimport PageTransition from \"../../components/animations/PageTransition\";\nimport AnimationContainer from \"../../components/animations/AnimationContainer\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport api from \"../../services/apiService\";\n\nconst PageContainer = styled.div`\n  padding: ${(props) => props.theme.spacing(3)};\n`;\n\nconst Header = styled.div`\n  margin-bottom: ${(props) => props.theme.spacing(4)};\n`;\n\nconst Title = styled.h1`\n  font-size: 1.5rem;\n  color: ${(props) => props.theme.colors.text.primary};\n  margin-bottom: ${(props) => props.theme.spacing(1)};\n`;\n\nconst Subtitle = styled.p`\n  color: ${(props) => props.theme.colors.text.secondary};\n  font-size: 0.9rem;\n`;\n\nconst FormContainer = styled.div`\n  background-color: ${(props) => props.theme.colors.background.paper};\n  border-radius: ${(props) => props.theme.borderRadius.medium};\n  padding: ${(props) => props.theme.spacing(3)};\n  box-shadow: ${(props) => props.theme.shadows.small};\n  max-width: 800px;\n  margin: 0 auto;\n`;\n\nconst FormSection = styled.div`\n  margin-bottom: ${(props) => props.theme.spacing(4)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst SectionTitle = styled.h2`\n  font-size: 1.1rem;\n  color: ${(props) => props.theme.colors.text.primary};\n  margin-bottom: ${(props) => props.theme.spacing(2)};\n  display: flex;\n  align-items: center;\n  gap: ${(props) => props.theme.spacing(1)};\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: ${(props) => props.theme.spacing(2)};\n`;\n\nconst Label = styled.label`\n  display: block;\n  font-size: 0.9rem;\n  margin-bottom: ${(props) => props.theme.spacing(1)};\n  color: ${(props) => props.theme.colors.text.secondary};\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: ${(props) => props.theme.spacing(1.5)};\n  border-radius: ${(props) => props.theme.borderRadius.small};\n  border: 1px solid ${(props) => props.theme.colors.border};\n  font-size: 0.9rem;\n  background-color: ${(props) => props.theme.colors.background.default};\n  color: ${(props) => props.theme.colors.text.primary};\n\n  &:focus {\n    outline: none;\n    border-color: ${(props) => props.theme.colors.primary.main};\n    box-shadow: 0 0 0 2px ${(props) => props.theme.colors.primary.main + \"30\"};\n  }\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  padding: ${(props) => props.theme.spacing(1.5)};\n  border-radius: ${(props) => props.theme.borderRadius.small};\n  border: 1px solid ${(props) => props.theme.colors.border};\n  font-size: 0.9rem;\n  background-color: ${(props) => props.theme.colors.background.default};\n  color: ${(props) => props.theme.colors.text.primary};\n\n  &:focus {\n    outline: none;\n    border-color: ${(props) => props.theme.colors.primary.main};\n    box-shadow: 0 0 0 2px ${(props) => props.theme.colors.primary.main + \"30\"};\n  }\n`;\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  padding: ${(props) => props.theme.spacing(1.5)};\n  border-radius: ${(props) => props.theme.borderRadius.small};\n  border: 1px solid ${(props) => props.theme.colors.border};\n  font-size: 0.9rem;\n  background-color: ${(props) => props.theme.colors.background.default};\n  color: ${(props) => props.theme.colors.text.primary};\n  min-height: 100px;\n  resize: vertical;\n\n  &:focus {\n    outline: none;\n    border-color: ${(props) => props.theme.colors.primary.main};\n    box-shadow: 0 0 0 2px ${(props) => props.theme.colors.primary.main + \"30\"};\n  }\n`;\n\nconst Row = styled.div`\n  display: flex;\n  gap: ${(props) => props.theme.spacing(2)};\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst Column = styled.div`\n  flex: 1;\n`;\n\nconst ResultItemContainer = styled.div`\n  margin-bottom: ${(props) => props.theme.spacing(2)};\n  padding: ${(props) => props.theme.spacing(2)};\n  border: 1px solid ${(props) => props.theme.colors.border};\n  border-radius: ${(props) => props.theme.borderRadius.small};\n  background-color: ${(props) => props.theme.colors.background.default};\n`;\n\nconst ResultItem = styled.div`\n  margin-bottom: ${(props) => props.theme.spacing(2)};\n  padding: ${(props) => props.theme.spacing(2)};\n  border: 1px solid ${(props) => props.theme.colors.border};\n  border-radius: ${(props) => props.theme.borderRadius.small};\n  background-color: ${(props) => props.theme.colors.background.default};\n  display: flex;\n  gap: ${(props) => props.theme.spacing(2)};\n  align-items: flex-end;\n`;\n\nconst ResultRow = styled.div`\n  display: flex;\n  gap: ${(props) => props.theme.spacing(2)};\n  margin-bottom: ${(props) => props.theme.spacing(1)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst AddButton = styled.button`\n  display: inline-flex;\n  align-items: center;\n  gap: ${(props) => props.theme.spacing(1)};\n  padding: ${(props) => props.theme.spacing(1)}\n    ${(props) => props.theme.spacing(2)};\n  border: 1px dashed ${(props) => props.theme.colors.primary.main};\n  border-radius: ${(props) => props.theme.borderRadius.small};\n  background-color: transparent;\n  color: ${(props) => props.theme.colors.primary.main};\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:hover {\n    background-color: ${(props) => props.theme.colors.primary.main + \"10\"};\n  }\n`;\n\nconst RemoveButton = styled.button`\n  padding: ${(props) => props.theme.spacing(0.5)};\n  background-color: ${(props) => props.theme.colors.status.error + \"10\"};\n  color: ${(props) => props.theme.colors.status.error};\n  border: none;\n  border-radius: ${(props) => props.theme.borderRadius.small};\n  cursor: pointer;\n  font-size: 0.8rem;\n  transition: all 0.2s;\n\n  &:hover {\n    background-color: ${(props) => props.theme.colors.status.error + \"20\"};\n  }\n`;\n\nconst Button = styled(motion.button)`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: ${(props) => props.theme.spacing(1)};\n  padding: ${(props) => props.theme.spacing(1.5)}\n    ${(props) => props.theme.spacing(3)};\n  background-color: ${(props) =>\n    props.variant === \"secondary\"\n      ? props.theme.colors.background.default\n      : props.theme.colors.primary.main};\n  color: ${(props) =>\n    props.variant === \"secondary\" ? props.theme.colors.text.primary : \"white\"};\n  border: ${(props) =>\n    props.variant === \"secondary\"\n      ? `1px solid ${props.theme.colors.border}`\n      : \"none\"};\n  border-radius: ${(props) => props.theme.borderRadius.medium};\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:hover {\n    background-color: ${(props) =>\n      props.variant === \"secondary\"\n        ? props.theme.colors.background.card\n        : props.theme.colors.primary.light};\n  }\n\n  &:disabled {\n    background-color: ${(props) => props.theme.colors.text.disabled};\n    cursor: not-allowed;\n  }\n`;\n\nconst SubmitButton = styled(motion.button)`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: ${(props) => props.theme.spacing(1)};\n  padding: ${(props) => props.theme.spacing(1.5)}\n    ${(props) => props.theme.spacing(3)};\n  background-color: ${(props) => props.theme.colors.primary.main};\n  color: white;\n  border: none;\n  border-radius: ${(props) => props.theme.borderRadius.medium};\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: ${(props) => props.theme.colors.primary.light};\n  }\n\n  &:disabled {\n    background-color: ${(props) => props.theme.colors.text.disabled};\n    cursor: not-allowed;\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: ${(props) => props.theme.spacing(4)};\n`;\n\nconst SuccessMessage = styled(motion.div)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  padding: ${(props) => props.theme.spacing(4)};\n`;\n\nconst SuccessTitle = styled.h2`\n  color: ${(props) => props.theme.colors.status.success};\n  font-size: 1.3rem;\n  margin: ${(props) => props.theme.spacing(2)} 0;\n`;\n\nconst SuccessText = styled.p`\n  color: ${(props) => props.theme.colors.text.secondary};\n  margin-bottom: ${(props) => props.theme.spacing(3)};\n`;\n\nconst UploadLabResults = () => {\n  const { user } = useAuth();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const queryParams = new URLSearchParams(location.search);\n  const orderId = queryParams.get(\"orderId\");\n\n  const [patients, setPatients] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [selectedPatient, setSelectedPatient] = useState(\"\");\n  const [reportType, setReportType] = useState(\"Blood Test\");\n  const [notes, setNotes] = useState(\"\");\n  const [results, setResults] = useState([\n    { parameter: \"\", value: \"\", unit: \"\" },\n  ]);\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    // Fetch patients and lab orders\n    const fetchData = async () => {\n      try {\n        setInitialLoading(true);\n\n        // Get the list of patients for the dropdown\n        const patientsData = await api.getPatients();\n        setPatients(patientsData);\n\n        // Get lab orders for the current technician\n        const ordersData = await api.getLabOrders({\n          technician: user._id,\n          status: \"in_progress\",\n        });\n        setOrders(ordersData);\n\n        // If an orderId is provided in the URL, select it\n        if (orderId) {\n          const order = ordersData.find((o) => o._id === orderId);\n          if (order) {\n            setSelectedOrder(order);\n            setSelectedPatient(order.patient._id);\n            setReportType(order.testType);\n            setNotes(order.notes || \"\");\n\n            // Use the updateResultsForTestType function to set appropriate fields\n            updateResultsForTestType(order.testType);\n          }\n        } else {\n          // If no order is selected, initialize form fields based on default test type\n          updateResultsForTestType(\"Blood Test\"); // Default to Blood Test\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setInitialLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [orderId, user._id]);\n\n  const addResultItem = () => {\n    setResults([...results, { parameter: \"\", value: \"\", unit: \"\" }]);\n  };\n\n  const removeResultItem = (index) => {\n    const updatedResults = [...results];\n    updatedResults.splice(index, 1);\n    setResults(updatedResults);\n  };\n\n  // Function to get suggested parameters based on test type\n  const getSuggestedParameters = () => {\n    if (reportType === \"Blood Test\") {\n      return [\n        \"Hemoglobin\",\n        \"White Blood Cells\",\n        \"Red Blood Cells\",\n        \"Platelets\",\n        \"Glucose\",\n        \"Cholesterol\",\n        \"Triglycerides\",\n        \"HDL\",\n        \"LDL\",\n        \"Sodium\",\n        \"Potassium\",\n        \"Chloride\",\n      ];\n    } else if (reportType === \"Urine Analysis\") {\n      return [\n        \"pH\",\n        \"Specific Gravity\",\n        \"Glucose\",\n        \"Protein\",\n        \"Ketones\",\n        \"Nitrites\",\n        \"Leukocytes\",\n        \"Blood\",\n      ];\n    } else if (\n      reportType === \"X-Ray\" ||\n      reportType === \"CT Scan\" ||\n      reportType === \"MRI\"\n    ) {\n      return [\"Region\", \"Findings\", \"Impression\", \"Recommendations\"];\n    }\n    return [];\n  };\n\n  // Function to get suggested units based on parameter\n  const getSuggestedUnit = (parameter) => {\n    const unitMap = {\n      // Blood Test units\n      Hemoglobin: \"g/dL\",\n      \"White Blood Cells\": \"thousand/μL\",\n      \"Red Blood Cells\": \"million/μL\",\n      Platelets: \"thousand/μL\",\n      Glucose: \"mg/dL\",\n      Cholesterol: \"mg/dL\",\n      Triglycerides: \"mg/dL\",\n      HDL: \"mg/dL\",\n      LDL: \"mg/dL\",\n      Sodium: \"mEq/L\",\n      Potassium: \"mEq/L\",\n      Chloride: \"mEq/L\",\n\n      // Urine Analysis units\n      \"Specific Gravity\": \"\",\n      Glucose: \"mg/dL\",\n      Protein: \"mg/dL\",\n      Ketones: \"mg/dL\",\n    };\n\n    return unitMap[parameter] || \"\";\n  };\n\n  // Modify handleResultChange to auto-suggest unit when parameter changes\n  const handleResultChange = (index, field, value) => {\n    const updatedResults = [...results];\n    updatedResults[index][field] = value;\n\n    // If the parameter field changed, suggest a unit\n    if (field === \"parameter\") {\n      updatedResults[index].unit = getSuggestedUnit(value);\n    }\n\n    setResults(updatedResults);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      // Convert results array to object format for the API\n      const resultsObject = {};\n      results.forEach((item) => {\n        if (item.parameter) {\n          resultsObject[item.parameter] = `${item.value} ${item.unit}`;\n        }\n      });\n\n      // Format data for API\n      const reportData = {\n        patient: selectedPatient,\n        technician: user._id,\n        reportType,\n        notes,\n        results: resultsObject,\n        status: \"completed\",\n        // Link to the order if one was selected\n        orderId: selectedOrder ? selectedOrder._id : null,\n        // Include doctor information from the selected order if available\n        doctor: selectedOrder?.doctor?._id || null,\n      };\n\n      console.log(\"Uploading lab report with data:\", reportData);\n\n      // Call the API to upload the report\n      const uploadedReport = await api.uploadLabReport(reportData);\n\n      // If this is linked to an order, update the order status and link the report\n      if (selectedOrder) {\n        console.log(\n          `Updating lab order ${selectedOrder._id} with report ID ${uploadedReport._id}`\n        );\n        await api.updateLabOrder(selectedOrder._id, {\n          status: \"completed\",\n          reportId: uploadedReport._id,\n          completedDate: new Date().toISOString(),\n        });\n      }\n\n      // Show success message\n      setSuccess(true);\n\n      // Reset form after success\n      setTimeout(() => {\n        navigate(\"/dashboard/view-lab-orders\");\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error uploading lab report:\", error);\n      alert(`Failed to upload report: ${error.message || \"Unknown error\"}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateResultsForTestType = (testType) => {\n    console.log(\"Updating results for test type:\", testType);\n\n    // Set default parameters based on test type\n    if (testType === \"Blood Test\") {\n      setResults([\n        { parameter: \"Hemoglobin\", value: \"\", unit: \"g/dL\" },\n        { parameter: \"White Blood Cells\", value: \"\", unit: \"thousand/μL\" },\n        { parameter: \"Platelets\", value: \"\", unit: \"thousand/μL\" },\n        { parameter: \"Glucose\", value: \"\", unit: \"mg/dL\" },\n      ]);\n    } else if (testType === \"Urine Analysis\") {\n      setResults([\n        { parameter: \"pH\", value: \"\", unit: \"\" },\n        { parameter: \"Specific Gravity\", value: \"\", unit: \"\" },\n        { parameter: \"Glucose\", value: \"\", unit: \"mg/dL\" },\n        { parameter: \"Protein\", value: \"\", unit: \"mg/dL\" },\n      ]);\n    } else if (testType === \"X-Ray\") {\n      setResults([\n        { parameter: \"Findings\", value: \"\", unit: \"\" },\n        { parameter: \"Impression\", value: \"\", unit: \"\" },\n      ]);\n    } else if (testType === \"CT Scan\") {\n      setResults([\n        { parameter: \"Region\", value: \"\", unit: \"\" },\n        { parameter: \"Findings\", value: \"\", unit: \"\" },\n        { parameter: \"Impression\", value: \"\", unit: \"\" },\n      ]);\n    } else if (testType === \"MRI\") {\n      setResults([\n        { parameter: \"Region\", value: \"\", unit: \"\" },\n        { parameter: \"Findings\", value: \"\", unit: \"\" },\n        { parameter: \"Impression\", value: \"\", unit: \"\" },\n      ]);\n    } else {\n      // Default to empty result if test type is not recognized\n      setResults([{ parameter: \"\", value: \"\", unit: \"\" }]);\n    }\n  };\n\n  if (initialLoading) {\n    return (\n      <PageTransition>\n        <AnimationContainer type=\"loading\" height=\"300px\" />\n      </PageTransition>\n    );\n  }\n\n  if (success) {\n    return (\n      <PageTransition>\n        <PageContainer>\n          <FormContainer>\n            <SuccessMessage\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5 }}\n            >\n              <FaCheck size={50} color=\"#4CAF50\" />\n              <SuccessTitle>Lab Report Uploaded Successfully!</SuccessTitle>\n              <SuccessText>\n                The lab report has been successfully uploaded and is now\n                available in the system.\n              </SuccessText>\n              <AnimationContainer type=\"success\" height=\"200px\" />\n            </SuccessMessage>\n          </FormContainer>\n        </PageContainer>\n      </PageTransition>\n    );\n  }\n\n  return (\n    <PageTransition>\n      <PageContainer>\n        <Header>\n          <Title>Upload Lab Results</Title>\n          <Subtitle>\n            Complete the form below to upload new lab test results. These\n            results will be accessible to the patient and their doctor through\n            the patient records.\n          </Subtitle>\n        </Header>\n\n        <FormContainer>\n          <form onSubmit={handleSubmit}>\n            <FormSection>\n              <SectionTitle>\n                <FaUser />\n                Patient Information\n              </SectionTitle>\n\n              {selectedOrder ? (\n                // When we have a selected order, show patient and doctor info directly\n                <>\n                  <div style={{ marginBottom: \"1rem\" }}>\n                    <Label>Patient</Label>\n                    <div\n                      style={{\n                        padding: \"0.75rem\",\n                        border: \"1px solid #ddd\",\n                        borderRadius: \"4px\",\n                        backgroundColor: \"#f9f9f9\",\n                      }}\n                    >\n                      {selectedOrder.patient?.name || \"Unknown Patient\"}\n                    </div>\n                  </div>\n\n                  <div style={{ marginBottom: \"1rem\" }}>\n                    <Label>Requested By</Label>\n                    <div\n                      style={{\n                        padding: \"0.75rem\",\n                        border: \"1px solid #ddd\",\n                        borderRadius: \"4px\",\n                        backgroundColor: \"#f9f9f9\",\n                      }}\n                    >\n                      {selectedOrder.doctor?.name || \"Unknown Doctor\"}\n                    </div>\n                  </div>\n\n                  <div style={{ marginBottom: \"1rem\" }}>\n                    <Label>Date Requested</Label>\n                    <div\n                      style={{\n                        padding: \"0.75rem\",\n                        border: \"1px solid #ddd\",\n                        borderRadius: \"4px\",\n                        backgroundColor: \"#f9f9f9\",\n                      }}\n                    >\n                      {new Date(selectedOrder.requestedDate).toLocaleDateString(\n                        \"en-US\",\n                        {\n                          year: \"numeric\",\n                          month: \"short\",\n                          day: \"numeric\",\n                        }\n                      )}\n                    </div>\n                  </div>\n                </>\n              ) : (\n                // When no order is selected, show the dropdown for manual selection\n                <>\n                  <FormGroup>\n                    <Label htmlFor=\"patient\">Patient</Label>\n                    <Select\n                      id=\"patient\"\n                      value={selectedPatient}\n                      onChange={(e) => setSelectedPatient(e.target.value)}\n                      required\n                    >\n                      <option value=\"\">-- Select Patient --</option>\n                      {patients.map((patient) => (\n                        <option key={patient._id} value={patient._id}>\n                          {patient.name}\n                        </option>\n                      ))}\n                    </Select>\n                  </FormGroup>\n\n                  {orders.length > 0 && (\n                    <FormGroup>\n                      <Label htmlFor=\"order\">Lab Order (Optional)</Label>\n                      <Select\n                        id=\"order\"\n                        value={selectedOrder?._id || \"\"}\n                        onChange={(e) => {\n                          const order = orders.find(\n                            (o) => o._id === e.target.value\n                          );\n                          setSelectedOrder(order || null);\n                          if (order) {\n                            setSelectedPatient(order.patient._id);\n                            setReportType(order.testType);\n                            setNotes(order.notes || \"\");\n\n                            // Use the updateResultsForTestType function to set appropriate fields\n                            updateResultsForTestType(order.testType);\n                          }\n                        }}\n                      >\n                        <option value=\"\">-- Select Order --</option>\n                        {orders.map((order) => (\n                          <option key={order._id} value={order._id}>\n                            {order.testType} for{\" \"}\n                            {order.patient?.name || \"Unknown Patient\"}\n                          </option>\n                        ))}\n                      </Select>\n                    </FormGroup>\n                  )}\n                </>\n              )}\n            </FormSection>\n\n            <FormSection>\n              <SectionTitle>\n                <FaFileMedical />\n                Report Details\n              </SectionTitle>\n\n              {selectedOrder ? (\n                // When we have a selected order, show test type directly\n                <div style={{ marginBottom: \"1rem\" }}>\n                  <Label>Test Type</Label>\n                  <div\n                    style={{\n                      padding: \"0.75rem\",\n                      border: \"1px solid #ddd\",\n                      borderRadius: \"4px\",\n                      backgroundColor: \"#f9f9f9\",\n                    }}\n                  >\n                    {reportType}\n                  </div>\n                </div>\n              ) : (\n                // When no order is selected, show the dropdown for selection\n                <FormGroup>\n                  <Label htmlFor=\"reportType\">Test Type</Label>\n                  <Select\n                    id=\"reportType\"\n                    value={reportType}\n                    onChange={(e) => {\n                      const newTestType = e.target.value;\n                      setReportType(newTestType);\n\n                      // Update the results fields based on the selected test type\n                      updateResultsForTestType(newTestType);\n                    }}\n                    required\n                  >\n                    <option value=\"Blood Test\">Blood Test</option>\n                    <option value=\"Urine Analysis\">Urine Analysis</option>\n                    <option value=\"X-Ray\">X-Ray</option>\n                    <option value=\"CT Scan\">CT Scan</option>\n                    <option value=\"MRI\">MRI</option>\n                  </Select>\n                </FormGroup>\n              )}\n\n              <FormGroup>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={notes}\n                  onChange={(e) => setNotes(e.target.value)}\n                  placeholder=\"Add any additional notes about the test...\"\n                />\n              </FormGroup>\n            </FormSection>\n\n            <FormSection>\n              <SectionTitle>\n                <FaVial />\n                Test Results\n              </SectionTitle>\n\n              <div\n                style={{\n                  marginBottom: \"16px\",\n                  fontSize: \"0.9rem\",\n                  color: \"#666\",\n                }}\n              >\n                <p>\n                  Enter test parameters and values based on the selected test\n                  type. The system suggests commonly used parameters for{\" \"}\n                  {reportType}. You can select from the suggestions or enter\n                  custom parameters.\n                </p>\n              </div>\n\n              {results.map((result, index) => (\n                <ResultItem key={index}>\n                  <FormGroup style={{ flex: 2 }}>\n                    <Label htmlFor={`parameter-${index}`}>Parameter</Label>\n                    <div style={{ position: \"relative\" }}>\n                      <Input\n                        id={`parameter-${index}`}\n                        value={result.parameter}\n                        onChange={(e) =>\n                          handleResultChange(index, \"parameter\", e.target.value)\n                        }\n                        placeholder=\"e.g. Hemoglobin\"\n                        list={`parameters-list-${index}`}\n                        required\n                      />\n                      <datalist id={`parameters-list-${index}`}>\n                        {getSuggestedParameters().map((param, i) => (\n                          <option key={i} value={param} />\n                        ))}\n                      </datalist>\n                    </div>\n                  </FormGroup>\n                  <FormGroup style={{ flex: 1 }}>\n                    <Label htmlFor={`value-${index}`}>Value</Label>\n                    <Input\n                      id={`value-${index}`}\n                      value={result.value}\n                      onChange={(e) =>\n                        handleResultChange(index, \"value\", e.target.value)\n                      }\n                      placeholder=\"14.5\"\n                      required\n                    />\n                  </FormGroup>\n                  <FormGroup style={{ flex: 1 }}>\n                    <Label htmlFor={`unit-${index}`}>Unit</Label>\n                    <Input\n                      id={`unit-${index}`}\n                      value={result.unit}\n                      onChange={(e) =>\n                        handleResultChange(index, \"unit\", e.target.value)\n                      }\n                      placeholder=\"g/dL\"\n                    />\n                  </FormGroup>\n                  {results.length > 1 && (\n                    <RemoveButton\n                      type=\"button\"\n                      onClick={() => removeResultItem(index)}\n                    >\n                      <FaTimes />\n                    </RemoveButton>\n                  )}\n                </ResultItem>\n              ))}\n\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={addResultItem}\n                style={{ marginTop: \"1rem\" }}\n              >\n                <FaPlus /> Add Parameter\n              </Button>\n            </FormSection>\n\n            <div\n              style={{\n                marginTop: \"1rem\",\n                padding: \"1rem\",\n                backgroundColor: \"#e3f2fd\",\n                borderRadius: \"4px\",\n                fontSize: \"0.9rem\",\n              }}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  marginBottom: \"0.5rem\",\n                }}\n              >\n                <FaUser style={{ marginRight: \"0.5rem\", color: \"#2196f3\" }} />\n                <strong>Important:</strong>\n              </div>\n              <p style={{ margin: \"0\" }}>\n                Lab results will be immediately accessible to the patient and\n                their doctor in their medical records. Make sure all information\n                is accurate before submission.\n              </p>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={loading}\n              style={{ marginTop: \"2rem\" }}\n            >\n              {loading ? \"Uploading...\" : \"Upload Lab Results\"}\n            </Button>\n          </form>\n        </FormContainer>\n      </PageContainer>\n    </PageTransition>\n  );\n};\n\nexport default UploadLabResults;\n"],"names":["PageContainer","styled","props","Header","Title","Subtitle","FormContainer","FormSection","SectionTitle","FormGroup","Label","Input","Select","Textarea","ResultItem","RemoveButton","Button","motion","SuccessMessage","SuccessTitle","SuccessText","UploadLabResults","user","useAuth","location","useLocation","navigate","useNavigate","orderId","patients","setPatients","useState","orders","setOrders","selectedOrder","setSelectedOrder","selectedPatient","setSelectedPatient","reportType","setReportType","notes","setNotes","results","setResults","loading","setLoading","initialLoading","setInitialLoading","success","setSuccess","useEffect","patientsData","api","ordersData","order","o","updateResultsForTestType","error","addResultItem","removeResultItem","index","updatedResults","getSuggestedParameters","getSuggestedUnit","parameter","handleResultChange","field","value","handleSubmit","e","resultsObject","item","reportData","_a","uploadedReport","testType","jsx","PageTransition","AnimationContainer","jsxs","FaCheck","FaUser","Fragment","_b","patient","FaFileMedical","newTestType","FaVial","result","param","i","FaTimes","FaPlus"],"mappings":"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"}